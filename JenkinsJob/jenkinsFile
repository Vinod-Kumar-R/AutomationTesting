/**
Below are the plugin and its version has to be install before running the job
Agent Server Parameter : 1.1
Copy Artifact : 1.46.1
HTML Publisher : 1.25
Pipeline Utility Steps : 2.8.0
File Operations : 1.11
Warnings Next Generation Plugin : 9.11.1
**/
def ResultLocation
def param
pipeline {
  agent {
    label params['agent-name']
  }
  parameters {
    agentParameter name: 'agent-name'

    choice(
      name: 'Browser',
      choices: ['CHROME', 'FIREFOX', 'OPERA', 'EDGE', 'IEXPLORER', 'SAFARI', 'ANDROID_CHROME', 'IOS_SAFARI', 'MOBILE_EMULATION', 'BROWSER_STACK'],
      description: 'Choose the browser in which Automation script has to executed');

    booleanParam(
      name: 'Docker',
      defaultValue: false,
      description: 'Set to true if test to run on docker else false');

    booleanParam(
      name: 'Video_Recordring',
      defaultValue: false,
      description: 'Record the failed test case if docker is enable');

    booleanParam(
      name: 'Headless_Browser',
      defaultValue: false,
      description: 'Set to true if execution run in headless browser');

    text(
      defaultValue: '',
      description: 'This is used to set the configuration file for automation \n Example : \n -Demail.toid=\"vinodraju26@gmail.com\" ',
      name: 'InputParameter');

  }
  environment {
    automation = 'automation'
    ENV_ReportURL = "${BUILD_URL}"
    ENV_ReportName = 'AutomationResult'
  }

  options {
    buildDiscarder logRotator(
      artifactDaysToKeepStr: '10',
      artifactNumToKeepStr: '10',
      daysToKeepStr: '10',
      numToKeepStr: '10'
    )
    timestamps()
  }

  stages {
    stage('Clone & Build') {
      steps {
        script {
          // One or more steps need to be included within the steps block.
          git poll: false, url: 'https://github.com/Vinod-Kumar-R/AutomationTesting.git'
          if (isUnix()) {
            sh 'mvn clean compile install'
          } else {
            bat 'mvn clean compile install'
          }
        }
      }
      post {
        success {
          // One or more steps need to be included within each condition's block.
          archiveArtifacts artifacts: 'target/EncashAutomation.jar,target/lib/*.jar,target/properties/*.*,target/extension/*.*,target/docker/*.*,target/properties/chromedriver/chromedriver,target/testscript/*.*',
            followSymlinks: true
        }
      }
      agent {
        label 'master'
      }
    }
    stage('Static code Analysis') {
      steps {
        script {
          if (isUnix()) {
            sh 'mvn checkstyle:checkstyle'
            sh 'mvn pmd:pmd'
          } else {
            bat 'mvn checkstyle:checkstyle'
            bat 'mvn pmd:pmd'
          }
          recordIssues(
            enabledForFailure: true,
            failOnError: true,
            healthy: 1,
            tools: [
              checkStyle(
                pattern: '**/target/site/checkstyle/checkstyle.xml',
                reportEncoding: 'UTF-8'
              ),
              pmdParser(
                pattern: '**/target/site/pmd/pmd.xml',
                reportEncoding: 'UTF-8'
              )
            ],
            unhealthy: 2
          )
        }
      }
      agent {
        label 'master'
      }
    }
    stage('Publish Java doc') {
      steps {
        script {
          // One or more steps need to be included within the steps block.
          if (isUnix()) {
            sh 'mvn javadoc:javadoc'
          } else {
            bat sh 'mvn javadoc:javadoc'
          }
          javadoc javadocDir: './target/site/javadoc', keepAll: false
          recordIssues(
            failOnError: true,
            healthy: 1,
            tools: [javaDoc(reportEncoding: 'UTF-8')],
            unhealthy: 2)
        }
      }
      agent {
        label 'master'
      }
    }
    stage('Copy Automation Script') {
      steps {
        script {
          deleteDir()
          copyArtifacts projectName: '${JOB_NAME}', selector: specific('${BUILD_NUMBER}')
          fileOperations([
            folderCreateOperation('automation'),
            folderCopyOperation(destinationFolderPath: 'automation/properties', sourceFolderPath: 'target/properties'),
            folderCopyOperation(destinationFolderPath: 'automation/extension', sourceFolderPath: 'target/extension'),
            folderCopyOperation(destinationFolderPath: 'automation/testscript', sourceFolderPath: 'target/testscript')
          ])
          sleep time: 30, unit: 'SECONDS'
        }
      }
    }
    stage('Execute Automation') {
      steps {
        script {
          //browser
          param = " -Dtest_execution=${Browser}"
          //build info
          param = "${param} -DbuildInfo=\"${JOB_NAME} ${BUILD_NUMBER}\""
          param = "${param} -DreportLink=\"${ENV_ReportURL}${ENV_ReportName}\""
          //docker
          if ("${Docker}") {
            param = "${param} -Ddocker=${Docker}"

            if ("${Video_Recordring}") {
              param = "${param} -Ddocker_video_recording=${Video_Recordring}"
            }
          }
          //headless
          if ("${Headless_Browser}") {
            param = "${param} -Dheadlessbrowser=${Headless_Browser}"
          }

          if (isUnix()) {
            sh label: 'start Automation', script: "java -jar $InputParameter $param ./target/EncashAutomation.jar"
          } else {
            bat label: 'start Automation', script: "java -jar $InputParameter $param ./target/EncashAutomation.jar"
          }
        }
      }
      post {
        always {
          
          def files = findFiles excludes: '', glob: '**/AutomationResult/automation.html'
          //echo """${files[0].name} ${files[0].path} ${files[0].directory} ${files[0].length} ${files[0].lastModified}"""
          ResultLocation = "${files[0].path}"
          ResultLocation = ResultLocation.replaceAll("automation.html", "")
          
          publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: "${ResultLocation}",
            reportFiles: 'automation.html',
            reportName: "${ENV_ReportName}",
            reportTitles: 'Result'
          ])
        }
      }
    }
  }
}