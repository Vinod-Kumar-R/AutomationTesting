/**
Below are the plugin and its version has to be install before running the job
Agent Server Parameter : 1.1
Copy Artifact : 1.46.1
HTML Publisher : 1.25
Pipeline Utility Steps : 2.8.0
File Operations : 1.11
**/
def ResultLocation
def param
pipeline {
  agent {
    label params['agent-name']
  }
  parameters {
    agentParameter name: 'agent-name'
    
    choice(
    name: 'Browser', 
    choices: ['CHROME', 'FIREFOX', 'OPERA', 'EDGE', 'IEXPLORER', 'SAFARI', 'ANDROID_CHROME', 'IOS_SAFARI', 'MOBILE_EMULATION', 'BROWSER_STACK'], 
    description: 'Choose the browser in which Automation script has to executed');
    
    booleanParam (
    name: 'Docker',
    defaultValue : false,
    description : 'Set to true if test to run on docker else false' );
    
    booleanParam (
    name: 'Video_Recordring',
    defaultValue : false,
    description : 'Record the failed test case if docker is enable' );
    
    booleanParam (
    name: 'Headless_Browser',
    defaultValue : false,
    description : 'Set to true if execution run in headless browser' );
    
    text(
    defaultValue: '', 
    description: 'This is used to set the configuration file for automation \n Example : \n -Demail.toid=\"vinodraju26@gmail.com\" ', 
    name: 'InputParameter');
    
  }
  environment {
    automation = "automation"
  }

  stages {
    stage('Build') {
      steps {
        build 'Automation Build'
        //input id: 'StartScript', message: 'Run Automation Script', ok: 'Build Success', submitter: 'tester'
      }
    }
    stage('Execute Automation') {
      steps {
        script {
          deleteDir()
          copyArtifacts projectName: 'Automation Build',
            selector: upstream(fallbackToLastSuccessful: true)
          fileOperations([
            folderCreateOperation('automation'),
            folderCopyOperation(destinationFolderPath: 'automation/properties', sourceFolderPath: 'target/properties'),
            folderCopyOperation(destinationFolderPath: 'automation/extension', sourceFolderPath: 'target/extension'),
            folderCopyOperation(destinationFolderPath: 'automation/testscript', sourceFolderPath: 'target/testscript')
          ])
          
          //assign parameter 
          //browser
          param = " -Dtest_execution=${Browser}"
          //docker
          if("${Docker}"){
              param = "${param} -Ddocker=${Docker}"
              
              if("${Video_Recordring}") {
                  param = "${param} -Ddocker_video_recording=${Video_Recordring}"
              }
          }
          //headless
          if("${Headless_Browser}"){
              param = "${param} -Dheadlessbrowser=${Headless_Browser}"
          }
          
          if (isUnix()) {
            sh label: 'start Automation', script: "java -jar $InputParameter $param ./target/EncashAutomation.jar"
          } else {
            bat label: 'start Automation', script: "java -jar $InputParameter $param ./target/EncashAutomation.jar"
          }
          def files = findFiles excludes: '', glob: '**/AutomationResult/automation.html'
          //echo """${files[0].name} ${files[0].path} ${files[0].directory} ${files[0].length} ${files[0].lastModified}"""
          ResultLocation = "${files[0].path}"
          ResultLocation = ResultLocation.replaceAll("automation.html", "")
        }
      }
      post {
        always {
          publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: "${ResultLocation}",
            reportFiles: 'automation.html',
            reportName: 'AutomationResult',
            reportTitles: 'Result'
          ])
        }
      }
    }
  }
}