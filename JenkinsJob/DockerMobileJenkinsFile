/**
Below are the plugin and its version has to be install before running the job
Agent Server Parameter : 1.1
Copy Artifact : 1.46.1
HTML Publisher : 1.25
Pipeline Utility Steps : 2.8.0
File Operations : 1.11
**/

def ResultLocation
pipeline {
  agent {
    label params['agent-name']
  }
  parameters {
    agentParameter name: 'agent-name'
    text defaultValue: 'User input required ', description: 'This is used to set the configuration file for automation', name: 'InputParameter'
  }
  environment {
    automation = "automation"
  }

  stages {
    stage('Build') {
      steps {
        build 'Automation Build'
      }
    }

    stage('Deploy') {
      steps {
        script {
          deleteDir()    
          copyArtifacts projectName: 'Automation Build',
            selector: upstream(fallbackToLastSuccessful: true)

          sh 'sudo docker-compose -f target/docker/mobile.yml up -d'
          sleep time: 2, unit: 'MINUTES'
          sh 'sudo docker cp target/properties/chromedriver/chromedriver container-appium:/'
          sh 'sudo docker exec container-appium chmod -R 777 /chromedriver'
          sh 'sudo docker exec container-appium adb connect nexus5'
        }
      }
    }
    stage('Execute Automation') {
      steps {
        script {
            fileOperations([
            folderCreateOperation('automation'),
            folderCopyOperation(destinationFolderPath: 'automation/properties', sourceFolderPath: 'target/properties'),
            folderCopyOperation(destinationFolderPath: 'automation/extension', sourceFolderPath: 'target/extension')
          ])
          if (isUnix()) {
            sh label: 'start Automation', script: "java -jar $InputParameter ./target/EncashAutomation.jar"
          } else {
            bat label: 'start Automation', script: "java -jar $InputParameter ./target/EncashAutomation.jar"
          }
          def files = findFiles excludes: '', glob: '**/AutomationResult/automation.html'
          ResultLocation = "${files[0].path}"
          ResultLocation = ResultLocation.replaceAll("automation.html", "")
        }
      }
      post {
        always {
          publishHTML([
            allowMissing: false,
            alwaysLinkToLastBuild: false,
            keepAll: true,
            reportDir: "${ResultLocation}",
            reportFiles: 'automation.html',
            reportName: 'AutomationResult',
            reportTitles: 'Result'
          ])
        }
      }
    }
  }
}